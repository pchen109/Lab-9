services:
  receiver:
    build:
      context: receiver
      dockerfile: Dockerfile
    volumes:
      - './logs/receiver.log:/app/logs/receiver.log'
      # - ./conf:/app/conf
      - ./test:/app/conf
    depends_on:
      - kafka
    ports:
      - '8080:8080'
  storage:
    build:
      context: storage
      dockerfile: Dockerfile
    volumes:
      - './logs/storage.log:/app/logs/storage.log'
      - ./prod:/app/conf/prod
    depends_on:
      - db
      - kafka
    restart:
      always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s
  processing:
    build:
      context: processing
      dockerfile: Dockerfile
    volumes:
      - './logs/processing.log:/app/logs/processing.log'
      - ./test:/app/conf
      - ./data/processing:/app/data
    depends_on:
      - storage
    ports:
      - '8100:8100'
  analyzer:
    build:
      context: analyzer
      dockerfile: Dockerfile
    volumes:
      - './logs/analyzer.log:/app/logs/analyzer.log'
      - ./test:/app/conf
    depends_on:
      - kafka
    ports:
      - '8111:8111'
  zookeeper:
    image: wurstmeister/zookeeper
    volumes:
      - zookeeper_data:/data
  kafka:
    image: wurstmeister/kafka
    command:
      - start-kafka.sh
    environment:
      KAFKA_CREATE_TOPICS: 'events:1:1'
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_LISTENERS: 'INSIDE://:29092,OUTSIDE://:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: 'INSIDE://kafka:29092,OUTSIDE://kafka:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
    volumes:
      # - '/var/run/docker.sock:/var/run/docker.sock'
      - './data/kafka:/kafka/'
    depends_on:
      - zookeeper
  db:
    image: mysql
    restart: always
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: 1
      MYSQL_DATABASE: yapper
      MYSQL_USER: yapper
      MYSQL_PASSWORD: yapper
    volumes:
      - './data/database:/var/lib/mysql'

volumes:
  zookeeper_data: